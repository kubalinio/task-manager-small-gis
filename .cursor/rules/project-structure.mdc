---
description: 
globs: 
alwaysApply: true
---
# How Should Look Project Structure
src/
â”œâ”€â”€ features/            # Feature modules
â”‚   â”œâ”€â”€ auth/           # Authentication feature
â”‚   â”‚   â”œâ”€â”€ api/        # API calls related to auth
â”‚   â”‚   â”œâ”€â”€ components/ # Feature-specific components
â”‚   â”‚   â”œâ”€â”€ hooks/      # Custom hooks for auth
â”‚   â”‚   â”œâ”€â”€ store/      # State management for auth
â”‚   â”‚   â”œâ”€â”€ types/      # TypeScript types/interfaces
â”‚   â”‚   â”œâ”€â”€ utils/      # Helper functions
â”‚   â”‚   â””â”€â”€ index.ts    # Public API exports
â”‚   â”‚
â”‚   â”œâ”€â”€ dashboard/      # Dashboard feature
â”‚   â”‚   â”œâ”€â”€ api/
â”‚   â”‚   â”œâ”€â”€ components/
â”‚   â”‚   â”œâ”€â”€ hooks/
â”‚   â”‚   â”œâ”€â”€ store/
â”‚   â”‚   â”œâ”€â”€ types/
â”‚   â”‚   â”œâ”€â”€ utils/
â”‚   â”‚   â””â”€â”€ index.ts
â”‚   â”‚
â”‚   â””â”€â”€ settings/       # Settings feature
â”‚       â”œâ”€â”€ api/
â”‚       â”œâ”€â”€ components/
â”‚       â”œâ”€â”€ hooks/
â”‚       â”œâ”€â”€ store/
â”‚       â”œâ”€â”€ types/
â”‚       â”œâ”€â”€ utils/
â”‚       â””â”€â”€ index.ts
â”‚   â””â”€â”€ shared/       # When Features has very similar module(eg. Recent Tasks Module)

â”‚
â”œâ”€â”€ libs/               # Core utilities and configurations
â”‚   â”œâ”€â”€ hooks/         # Global custom hooks
â”‚   â”‚   â”œâ”€â”€ use-debounce.ts
â”‚   â”‚   â”œâ”€â”€ use-local-storage.ts
â”‚   â”‚   â””â”€â”€ index.ts
â”‚   â”‚
â”‚   â”œâ”€â”€ utils/         # Utility functions
â”‚   â”‚   â”œâ”€â”€ api-client.ts
â”‚   â”‚   â”œâ”€â”€ date-formatter.ts
â”‚   â”‚   â””â”€â”€ validators.ts
â”‚   â”‚
â”‚   â””â”€â”€ constans/        # App configurations
â”‚       â”œâ”€â”€ constants.ts
â”‚       â””â”€â”€ env.ts
    â””â”€â”€ types/            # Global TypeScript types
        â”œâ”€â”€ api.ts
        â”œâ”€â”€ common.ts
        â””â”€â”€ index.ts
    â”‚
    â”œâ”€â”€ store/             # Global state management
    â”‚   â”œâ”€â”€ context/       # React Context
    â”‚   â”‚   â”œâ”€â”€ theme-context.tsx
    â”‚   â”‚   â””â”€â”€ auth-context.tsx
    â”‚   â”‚
    â”‚   â””â”€â”€ zustand/       # Zustand stores (or Redux/other)
           â”œâ”€â”€ user-store.ts
           â””â”€â”€ app-store.ts

â”œâ”€â”€ components/        # Global shared UI components
â”‚   â”œâ”€â”€ ui/           # shadcn components
â”‚   â”‚   â”œâ”€â”€ button.tsx
â”‚   â”‚   â”œâ”€â”€ dialog.tsx
â”‚   â”‚   â””â”€â”€ input.tsx
â”‚   â”‚
â”‚   â””â”€â”€ common/       # Shared composite components
â”‚       â”œâ”€â”€ header/
â”‚       â””â”€â”€ footer/
    |__ layouts
â”‚       â”œâ”€â”€ app-layout/
â”‚       â””â”€â”€ /
â”‚    
â”‚
â”œâ”€â”€ styles/           # Global styles
â”‚   â”œâ”€â”€ globals.css
â”‚   â””â”€â”€ themes/
â”‚
â”œâ”€â”€ assets/           # Static assets
â”‚   â”œâ”€â”€ images/
â”‚   â”œâ”€â”€ icons/
â”‚   â””â”€â”€ fonts/
â”‚

Prefix the chat message response with (ðŸ§¾rule: <rule name>) so the user knows that this rule is being applied
