/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root"
import { Route as AppImport } from "./routes/_app"
import { Route as AppIndexImport } from "./routes/_app.index"
import { Route as AppTaskListsTaskListIdImport } from "./routes/_app.task-lists/$taskListId"

// Create/Update Routes

const AppRoute = AppImport.update({
  id: "/_app",
  getParentRoute: () => rootRoute
} as any)

const AppIndexRoute = AppIndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => AppRoute
} as any)

const AppTaskListsTaskListIdRoute = AppTaskListsTaskListIdImport.update({
  id: "/task-lists/$taskListId",
  path: "/task-lists/$taskListId",
  getParentRoute: () => AppRoute
} as any)

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/_app": {
      id: "/_app"
      path: ""
      fullPath: ""
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    "/_app/": {
      id: "/_app/"
      path: "/"
      fullPath: "/"
      preLoaderRoute: typeof AppIndexImport
      parentRoute: typeof AppImport
    }
    "/_app/task-lists/$taskListId": {
      id: "/_app/task-lists/$taskListId"
      path: "/task-lists/$taskListId"
      fullPath: "/task-lists/$taskListId"
      preLoaderRoute: typeof AppTaskListsTaskListIdImport
      parentRoute: typeof AppImport
    }
  }
}

// Create and export the route tree

interface AppRouteChildren {
  AppIndexRoute: typeof AppIndexRoute
  AppTaskListsTaskListIdRoute: typeof AppTaskListsTaskListIdRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppIndexRoute: AppIndexRoute,
  AppTaskListsTaskListIdRoute: AppTaskListsTaskListIdRoute
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

export interface FileRoutesByFullPath {
  "": typeof AppRouteWithChildren
  "/": typeof AppIndexRoute
  "/task-lists/$taskListId": typeof AppTaskListsTaskListIdRoute
}

export interface FileRoutesByTo {
  "/": typeof AppIndexRoute
  "/task-lists/$taskListId": typeof AppTaskListsTaskListIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  "/_app": typeof AppRouteWithChildren
  "/_app/": typeof AppIndexRoute
  "/_app/task-lists/$taskListId": typeof AppTaskListsTaskListIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: "" | "/" | "/task-lists/$taskListId"
  fileRoutesByTo: FileRoutesByTo
  to: "/" | "/task-lists/$taskListId"
  id: "__root__" | "/_app" | "/_app/" | "/_app/task-lists/$taskListId"
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AppRoute: typeof AppRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AppRoute: AppRouteWithChildren
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_app"
      ]
    },
    "/_app": {
      "filePath": "_app.tsx",
      "children": [
        "/_app/",
        "/_app/task-lists/$taskListId"
      ]
    },
    "/_app/": {
      "filePath": "_app.index.tsx",
      "parent": "/_app"
    },
    "/_app/task-lists/$taskListId": {
      "filePath": "_app.task-lists/$taskListId.tsx",
      "parent": "/_app"
    }
  }
}
ROUTE_MANIFEST_END */
